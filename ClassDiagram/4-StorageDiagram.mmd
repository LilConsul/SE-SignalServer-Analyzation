---
title: Signal Server Storage Architecture
config:
  theme: forest
  direction: TB
  class:
    hideEmptyMembersBox: false
---
classDiagram
    direction TB
%% Core Storage Interfaces
    class AbstractDynamoDbStore {
        #dynamoDb
        #tableName
        +getTableName()
        #get(primaryKey)
        #put(item)
        #delete(primaryKey)
        #scan()
        #query()
    }

%% Database Implementations
    class DynamoDbDatabase {
        -client: AmazonDynamoDB
        +putItem()
        +getItem()
        +deleteItem()
        +updateItem()
        +scan()
        +query()
    }

    class RedisCluster {
        -jedisCluster: JedisCluster
        +set(key, value)
        +setex(key, ttl, value)
        +get(key)
        +del(key)
        +exists(key)
        +expire(key, seconds)
        +eval(script)
    }

%% Core Storage Components
    class Account {
        +uuid: UUID
        +phoneNumber: String
        +identityKey: String
        +registrationLock: String
        +devices: List~Device~
        +getDevice(deviceId)
        +addDevice(device)
        +removeDevice(deviceId)
        +isEnabled()
        +getAuthenticatedDevice()
    }

    class Device {
        +id: long
        +name: String
        +authToken: String
        +signedPreKey: SignedPreKey
        +gcmId: String
        +apnId: String
        +capabilities: Set~DeviceCapability~
        +created: long
        +lastSeen: long
        +userAgent: String
    }

    class Accounts {
        -dynamoDb: DynamoDbClient
        -phoneNumberTable: Table
        -accountsTable: Table
        +create(account)
        +update(account)
        +get(uuid)
        +get(phoneNumber)
        +delete(account)
        +getAllFrom(uuid, max)
        +getAllByPhoneNumber()
        -fromItem(item)
        -toItem(account)
    }

    class AccountsManager {
        -accounts: Accounts
        -redisCluster: FaultTolerantRedisCluster
        -cacheCluster: FaultTolerantRedisCluster
        +get(uuid)
        +get(phoneNumber)
        +update(account)
        +create(account)
        +delete(account, deletePhysically)
        +getByAccountIdentifier(accountIdentifier)
        +removeDevice(account, deviceId)
        -redisUpdateOperation(account)
    }

%% Message Storage
    class MessagesDynamoDb {
        -messagesTable: Table
        -timeSeriesTable: Table
        -messageTimeSeriesTableIndex: String
        +store(message)
        +load(destination, destinationDevice, limit)
        +remove(destination, destinationDevice, uuid)
        +clear(destination)
        -messageToItem(message)
        -itemToMessage(item)
    }

    class MessagesCache {
        -redisCluster: FaultTolerantRedisCluster
        -inserter: MessagesCacheInsertScript
        -remover: MessagesCacheRemoveByGuidScript
        +insert(destinationUuid, destinationDevice, message)
        +get(destinationUuid, destinationDevice, limit, maybeAfterGuid)
        +remove(destinationUuid, destinationDevice, messageGuid)
        +clear(destinationUuid, destinationDevice)
    }

    class MessagePersister {
        -messagesManager: MessagesManager
        -messagesCache: MessagesCache
        -dynamoDb: MessagesDynamoDb
        +persistMissingMessages()
        -persistQueue(destinationUuid, destinationDeviceId)
        -scheduleQueue(destinationUuid, destinationDeviceId)
    }

    class MessagesManager {
        -messagesDynamoDb: MessagesDynamoDb
        -messagesCache: MessagesCache
        -messagePersister: MessagePersister
        +persist(source, destination, timestamp, content)
        +persistForRecipient(message, recipient)
        +storeMultiRecipientMessage(source, destinations, timestamp, content)
        +getMessagesForDevice(account, device, limit)
        +clear(destinationUuid, destinationDeviceId)
        +delete(account, uuid)
    }

%% Profile and Key Storage
    class Profiles {
        -dynamoDb: DynamoDbClient
        -profilesTable: Table
        -usernamesTable: Table
        +get(uuid, version)
        +set(uuid, version, name, avatar, commitment, commitment)
        +delete(uuid, version)
        +getAll(uuid, limit)
        +getVersionsForUuid(uuid, limit)
    }

    class KeysManager {
        -preKeyStore: SingleUsePreKeyStore
        -signedPreKeyStore: RepeatedUseSignedPreKeyStore
        -accountsManager: AccountsManager
        +get(account, deviceId, keyId)
        +getCount(account, deviceId)
        +store(account, deviceId, preKeys)
        +storeSingleUsePreKeys(account, deviceId, preKeys)
    }

%% Configuration and Metadata Storage
    class DynamicConfigurationManager {
        -dynamoDb: DynamoDbClient
        -configurationTable: Table
        -configuration: DynamicConfiguration
        +getConfiguration()
        +set(configuration)
        +refresh()
        -readConfiguration()
    }

    class RemoteConfigsManager {
        -redisCluster: FaultTolerantRedisCluster
        -remoteConfigs: RemoteConfigs
        +set(config)
        +getAll()
        +delete(name)
        -getFromCache()
    }

    class ClientReleaseManager {
        -clientReleases: ClientReleases
        -redisCluster: FaultTolerantRedisCluster
        +setMinimumVersion(platform, minVersion)
        +getMinimumVersion(platform, host)
        +getLegacyMinimumVersion(platform)
    }

%% Relationships
    AbstractDynamoDbStore <|-- Accounts
    AbstractDynamoDbStore <|-- MessagesDynamoDb
    AbstractDynamoDbStore <|-- Profiles
    Account *-- Device: contains
    AccountsManager o-- Accounts: uses for persistence
    AccountsManager o-- RedisCluster: uses for caching
    MessagesManager o-- MessagesDynamoDb: uses for persistence
    MessagesManager o-- MessagesCache: uses for caching
    MessagesManager o-- MessagePersister: coordinates persistence of
    MessagesCache o-- RedisCluster: uses
    KeysManager --> AccountsManager: references
    DynamicConfigurationManager --> DynamoDbDatabase: reads from
    RemoteConfigsManager --> RedisCluster: caches in
    ClientReleaseManager --> RedisCluster: caches in

