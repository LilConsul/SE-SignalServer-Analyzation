%%{ init: {
  "themeVariables": {
    "fontSize": "16px",
    "fontFamily": "monospace",
  },
  "class": { "useMaxWidth": true }
} }%%

classDiagram
    direction TB
    namespace texttextsecuregcm {
        class API_Layer {
            REST API endpoints
            gRPC interfaces
            WebSocket endpoints
        }
        class Business_Layer {
            Business logic
            Service operations
            Features implementation
        }
        class Infrastructure_Layer {
            Data persistence
            Caching
            External integrations
        }
        class Controllers {
            MessageController
            ProfileController
            KeysController
            DeviceController
            AccountController
            AttachmentController
        }
        class GRPC {
            RegistrationService
            KeyTransparencyService
            SecureValueRecoveryService
        }
        class WebSocket {
            WebSocketConnectionManager
            ProvisioningManager
            MessageDeliveryManager
        }
        class Managers {
            AccountsManager
            MessagesManager
            ProfilesManager
            KeysManager
            DevicesManager
        }
        class Authentication {
            AccountAuthenticator
            TurnTokenGenerator
            CredentialGenerator
        }
        class Push {
            PushNotificationManager
            APNSender
            GCMSender
            MessageSender
        }
        class Security {
            SecureStorageClient
            SecureValueRecovery
            KeyTransparency
        }
        class Storage {
            Accounts
            Messages
            Keys
            Profiles
            Devices
        }
        class Redis {
            ClientManager
            FaultTolerantCluster
            StateManagement
        }
        class Worker {
            DirectoryReconciliation
            MessagePersister
            CommandQueue
        }
        class AWS {
            S3(attachments)
            DynamoDB(data storage)
            CloudWatch(monitoring)
        }
        class GCP {
            FirebaseMessaging
            CloudStorage
        }
        class ExternalServices {
            Twilio(SMS)
            Stripe(payments)
            Braintree(payments)
        }
    }
    class WhisperServerConfiguration {
        ApnConfiguration
        UnidentifiedDeliveryConfiguration
        WebSocketConfiguration
        ...
        + getTlsKeyStoreConfiguration()
        + getAwsCredentialsConfiguration()
        + getStripe()
        + getBraintree()
        + getGooglePlayBilling()
        + getMaxDevices()
    }
    class WhisperServerService {
        - log
        - SECRETS_BUNDLE_FILE_NAME_PROPERTY
        + initialize(bootstrap)
        + run(config, environment)
        + main(args)
    }
    WhisperServerConfiguration <-- WhisperServerService: uses
    WhisperServerService --> API_Layer: exposes
    WhisperServerService --> Business_Layer: implements
    WhisperServerService --> Infrastructure_Layer: utilizes
    API_Layer *-- Controllers: contains
    API_Layer *-- GRPC: contains
    API_Layer *-- WebSocket: contains
    Business_Layer *-- Managers: contains
    Business_Layer *-- Authentication: contains
    Business_Layer *-- Push: contains
    Business_Layer *-- Security: contains
    Infrastructure_Layer *-- Storage: contains
    Infrastructure_Layer *-- Redis: contains
    Infrastructure_Layer *-- Worker: contains
    Controllers --> Managers: delegates business logic to
    Managers --> Storage: persists data through
    Managers --> Redis: caches data in
    Push --> ExternalServices: delivers notifications via
    WebSocket --> Redis: manages connection state in
    Infrastructure_Layer --> AWS: stores data in
    Infrastructure_Layer --> GCP: integrates with
    Business_Layer --> ExternalServices: uses services from
